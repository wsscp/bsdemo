<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cc.oit.bsmes.wip.dao.EventTraceDAO">

	<resultMap type="cc.oit.bsmes.wip.model.EventTrace" id="getMap">
		<result property="code" column="CODE"/>
		<result property="name" column="NAME"/>
		<result property="eventContent" column="EVENT_CONTENT"/>
		<result property="eventReason" column="EVENT_REASON"/>
		<result property="eventResult" column="EVENT_RESULT"/>
		<result property="batchNo" column="BATCH_NO"/>
		<result property="processCode" column="PROCESS_CODE"/>
		<result property="processName" column="PROCESS_NAME"/>
		<result property="equipCode" column="EQUIP_CODE"/>
		<result property="createUserCode" column="CREATE_USER_CODE"/>
		<result property="createTime" column="CREATE_TIME"/>
	</resultMap>
	<select id="find" parameterType="cc.oit.bsmes.wip.model.EventTrace" resultMap="getMap">
		SELECT s.NAME,r.EVENT_CONTENT,r.EVENT_REASON,r.EVENT_RESULT,r.BATCH_NO,t.PROCESS_CODE,t.PROCESS_NAME,r.EQUIP_CODE,r.CREATE_USER_CODE,r.CREATE_TIME
		FROM T_EVE_EVENT_INFO r 
		INNER JOIN T_EVE_EVENT_TYPE s ON r.EVENT_TYPE_ID = s.ID
		LEFT JOIN T_PRO_PRODUCT_PROCESS t ON r.PROCESS_ID = t.ID
		<include refid="getParameter"/>
	</select>
	<select id="count" parameterType="cc.oit.bsmes.wip.model.EventTrace" resultType="int" >
		SELECT COUNT(1)
		FROM (SELECT s.CODE,r.EVENT_CONTENT,r.EVENT_REASON,r.EVENT_RESULT,r.BATCH_NO,t.PROCESS_CODE,r.EQUIP_CODE,r.CREATE_USER_CODE,r.CREATE_TIME
		FROM T_EVE_EVENT_INFO r
		INNER JOIN T_EVE_EVENT_TYPE s ON r.EVENT_TYPE_ID = s.ID
		LEFT JOIN T_PRO_PRODUCT_PROCESS t ON r.PROCESS_ID = t.ID
		<include refid="getParameter"/>)
	</select>
	
	<select id="getProcess" resultMap="getMap">
		SELECT PP.PROCESS_CODE,PP.PROCESS_NAME FROM T_EVE_EVENT_INFO EI
		INNER JOIN T_PRO_PRODUCT_PROCESS PP
		ON (PP.ID=EI.PROCESS_ID)
		GROUP BY PP.PROCESS_CODE,PP.PROCESS_NAME 
	</select>
	
	<select id="findAllEventTrace" parameterType="map" resultMap="getMap">
			
			WITH TEMP AS(
			SELECT T.*,(CASE WHEN ROUND( (TO_DATE(TO_CHAR(COMPLETED_TIME,'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS')
			-TO_DATE(TO_CHAR(TRIGGER_TIME,'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS'))*24+0.05,2) IS NOT NULL THEN
			ROUND( (TO_DATE(TO_CHAR(COMPLETED_TIME,'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS')
			-TO_DATE(TO_CHAR(TRIGGER_TIME,'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS'))*24+0.05,2) || '小时'
			ELSE '' END) AS PROCESS_TIME,ROWNUM ROWNUM_ FROM
			(SELECT EI.ID,EI.EVENT_TITLE,EI.EVENT_CONTENT,
			(CASE WHEN EI.EVENT_TITLE='设备异常' THEN
			(CASE WHEN EQUIP_TROUBLE_DESCRIBETION IS NOT NULL AND RR.EQUIP_TROUBLE_ANALYZE IS NOT NULL
			THEN RR.EQUIP_TROUBLE_DESCRIBETION || '(' || RR.EQUIP_TROUBLE_ANALYZE || ')'
			ELSE '' END)
			ELSE EI.EVENT_REASON END) AS EVENT_REASON,
			(CASE WHEN EI.EVENT_TITLE='设备异常' THEN
			RR.REPAIR_MEASURES ELSE
			EI.EVENT_RESULT END) AS EVENT_RESULT,
			EI.EVENT_STATUS
			,EI.EQUIP_CODE,
			EQ.EQUIP_ALIAS,
			(SELECT EE.NAME FROM T_BAS_EMPLOYEE EE 
			WHERE EE.USER_CODE=EI.CREATE_USER_CODE) AS TRIGGER_USER,
			EI.CREATE_TIME AS TRIGGER_TIME,
			(CASE WHEN EI.MAINTAIN_PEOPLE='QG' THEN '钳工'
			ELSE  '电工' END) AS MAITAIN_TYPE,
			(CASE WHEN EI.EVENT_TITLE='设备异常' THEN REPAIR_MAN
			ELSE (SELECT WMSYS.WM_CONCAT(EE.NAME) FROM T_EVE_EVENT_OWNER EO,
			T_BAS_EMPLOYEE EE WHERE 
			EO.EVENT_ID=EI.ID AND EO.USER_CODE=EE.USER_CODE GROUP BY EI.ID) END) AS PROCESS_USER,
			(SELECT PL.CREATE_TIME FROM T_EVE_EVENT_PROCESS_LOG PL 
			WHERE PL.EVENT_INFO_ID=EI.ID AND PL.TYPE='RESPONDED' AND PL.CREATE_TIME IS NOT NULL) AS RESPONDED_TIME,
			(SELECT PL.CREATE_TIME FROM T_EVE_EVENT_PROCESS_LOG PL 
			WHERE PL.EVENT_INFO_ID=EI.ID AND PL.TYPE='COMPLETED'  AND PL.CREATE_TIME IS NOT NULL) AS COMPLETED_TIME,
			PP.PROCESS_NAME,
			EI.PROCESS_ID
			FROM T_EVE_EVENT_INFO EI
			INNER JOIN T_FAC_EQIP_INFO EQ ON(EI.EQUIP_CODE=EQ.CODE)
			INNER JOIN T_EVE_EQUIP_REPAIR_RECORD RR ON(RR.EVENT_INFO_ID=EI.ID)
			INNER JOIN T_PRO_PRODUCT_PROCESS PP ON(PP.ID=EI.PROCESS_ID)
			WHERE EI.EVENT_STATUS='COMPLETED'
			AND EI.PROCESS_ID IS NOT NULL
			<include refid="sqlwhere"/>
			ORDER BY EI.CREATE_TIME DESC) T)
			
			SELECT * FROM TEMP WHERE ROWNUM_<![CDATA[>]]>#{start, jdbcType=INTEGER} 
			AND ROWNUM_<![CDATA[<=]]>#{end, jdbcType=INTEGER} AND EVENT_REASON IS 
			NOT NULL AND EVENT_RESULT IS NOT NULL
	</select>
	
	<select id="countEventTrace" parameterType="map" resultType="int">
		WITH TEMP AS(
			SELECT T.*,(CASE WHEN ROUND( (TO_DATE(TO_CHAR(COMPLETED_TIME,'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS')
			-TO_DATE(TO_CHAR(TRIGGER_TIME,'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS'))*24+0.05,2) IS NOT NULL THEN
			ROUND( (TO_DATE(TO_CHAR(COMPLETED_TIME,'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS')
			-TO_DATE(TO_CHAR(TRIGGER_TIME,'YYYY-MM-DD HH24:MI:SS'),'YYYY-MM-DD HH24:MI:SS'))*24+0.05,2) || '小时'
			ELSE '' END) AS PROCESS_TIME,ROWNUM ROWNUM_ FROM
			(SELECT EI.ID,EI.EVENT_TITLE,EI.EVENT_CONTENT,
			(CASE WHEN EI.EVENT_TITLE='设备异常' THEN
			(CASE WHEN EQUIP_TROUBLE_DESCRIBETION IS NOT NULL AND RR.EQUIP_TROUBLE_ANALYZE IS NOT NULL
			THEN RR.EQUIP_TROUBLE_DESCRIBETION || '(' || RR.EQUIP_TROUBLE_ANALYZE || ')'
			ELSE '' END)
			ELSE EI.EVENT_REASON END) AS EVENT_REASON,
			(CASE WHEN EI.EVENT_TITLE='设备异常' THEN
			RR.REPAIR_MEASURES ELSE
			EI.EVENT_RESULT END) AS EVENT_RESULT,
			EI.EVENT_STATUS
			,EI.EQUIP_CODE,
			EQ.EQUIP_ALIAS,
			(SELECT EE.NAME FROM T_BAS_EMPLOYEE EE 
			WHERE EE.USER_CODE=EI.CREATE_USER_CODE) AS TRIGGER_USER,
			EI.CREATE_TIME AS TRIGGER_TIME,
			(CASE WHEN EI.MAINTAIN_PEOPLE='QG' THEN '钳工'
			ELSE  '电工' END) AS MAITAIN_TYPE,
			(CASE WHEN EI.EVENT_TITLE='设备异常' THEN REPAIR_MAN
			ELSE (SELECT WMSYS.WM_CONCAT(EE.NAME) FROM T_EVE_EVENT_OWNER EO,
			T_BAS_EMPLOYEE EE WHERE 
			EO.EVENT_ID=EI.ID AND EO.USER_CODE=EE.USER_CODE GROUP BY EI.ID) END) AS PROCESS_USER,
			(SELECT PL.CREATE_TIME FROM T_EVE_EVENT_PROCESS_LOG PL 
			WHERE PL.EVENT_INFO_ID=EI.ID AND PL.TYPE='RESPONDED' AND PL.CREATE_TIME IS NOT NULL) AS RESPONDED_TIME,
			(SELECT PL.CREATE_TIME FROM T_EVE_EVENT_PROCESS_LOG PL 
			WHERE PL.EVENT_INFO_ID=EI.ID AND PL.TYPE='COMPLETED'  AND PL.CREATE_TIME IS NOT NULL) AS COMPLETED_TIME,
			PP.PROCESS_NAME,
			EI.PROCESS_ID
			FROM T_EVE_EVENT_INFO EI
			INNER JOIN T_FAC_EQIP_INFO EQ ON(EI.EQUIP_CODE=EQ.CODE)
			INNER JOIN T_EVE_EQUIP_REPAIR_RECORD RR ON(RR.EVENT_INFO_ID=EI.ID)
			INNER JOIN T_PRO_PRODUCT_PROCESS PP ON(PP.ID=EI.PROCESS_ID)
			WHERE EI.EVENT_STATUS='COMPLETED'
			AND EI.PROCESS_ID IS NOT NULL
			<include refid="sqlwhere"/>
			ORDER BY EI.CREATE_TIME DESC) T)
			
			SELECT COUNT(ID) FROM TEMP WHERE EVENT_REASON IS 
			NOT NULL AND EVENT_RESULT IS NOT NULL
	</select>

	<sql id="getParameter" >
		<where>
			<if test="code!=null and code!=''">
				AND s.CODE=#{code,jdbcType=VARCHAR}
			</if>
			<if test="startTime!=null and startTime!=''">
				AND r.CREATE_TIME >=#{startTime,jdbcType=DATE}
			</if>
			<if test="endTime!=null and endTime!=''">
				AND r.CREATE_TIME <![CDATA[<]]>#{endTime,jdbcType=DATE}
			</if>
			<if test="processCode!=null and processCode!=''">
				AND r.PROCESS_ID IN (SELECT ID FROM T_PRO_PRODUCT_PROCESS WHERE PROCESS_CODE= #{processCode,jdbcType=DATE})
			</if>
			<if test="equipCode!=null and equipCode!=''">
				AND r.EQUIP_CODE=#{equipCode,jdbcType=VARCHAR}
			</if>
            <if test="orgCode !=null and orgCode != ''">
                AND r.ORG_CODE = #{orgCode,jdbcType=VARCHAR}
            </if>
		</where>
	</sql>
	
	<sql id="sqlwhere">
		<if test="eventTitle !=null ">
			AND EI.EVENT_TITLE=#{eventTitle, jdbcType=VARCHAR}
		</if>
		<if test="processCode !=null">
			AND PP.PROCESS_CODE=#{processCode, jdbcType=VARCHAR}
		</if>
		<if test="equipCode !=null">
			AND EI.EQUIP_CODE=#{equipCode, jdbcType=VARCHAR}
		</if>
	</sql>
</mapper>